e3 <- "Hospitalized %in% combo$hospitalized &"
}
if(length(grep("\\All\\b", combo$icu)) == 0) {
e4 <- "`Intensive Care Unit` %in% combo$icu &"
}
if(length(grep("\\All\\b", combo$death)) == 0) {
e5 <- "Death %in% combo$death &"
}
if(length(grep("\\All\\b", combo$exposure)) == 0) {
e6 <- "`Exposure Setting` %in% combo$exposure &"
}
if(length(e1) > 0 | length(e2) == 0 | length(e3) == 0 | length(e4) == 0 | length(e5) == 0 | length(e6) == 0) {
e <- paste0("d %>% filter(", e1, e2, e3, e4, e5, e6, ")")
e <- gsub("&)", ")", e)
#e <- paste0("d %>% filter(", e1, e2, ")", collapse = "")
d <- eval(parse(text = e))
}
# Convert episode date to date object
d$`Episode Date` <- as.Date(d$`Episode Date`, format = "%d-%b-%y")
# Remove cases with no episode date
d <- d %>% filter(! is.na(`Episode Date`))
# Sort data by episode date
d <- d[order(d$`Episode Date`),]
# Create a crosstab
crosstab <- d %>% group_by(`Episode Date`) %>% tally()
# Rename the n vector
names(crosstab)[ncol(crosstab)] <- "Incidence"
# Compute cumulative incidence
crosstab <- crosstab %>% mutate(`Cumulative Incidence` = cumsum(Incidence))
# Create an age group vector
crosstab <- crosstab %>% mutate(`Age Group` = rep(combo$age_group, nrow(crosstab)), Gender = rep(combo$gender, nrow(crosstab)), Hospitalized = rep(combo$hospitalized, nrow(crosstab)), `Intensive Care Unit` = rep(combo$icu, nrow(crosstab)), Death = rep(combo$death, nrow(crosstab)), `Exposure Setting` = rep(combo$exposure, nrow(crosstab)))
# Reorder columns
crosstab <- crosstab %>% select(`Age Group`, Gender, Hospitalized, `Intensive Care Unit`, Death, `Exposure Setting`, everything())
# Add day column
crosstab <- crosstab %>% mutate(Day = get_days(unlist(`Episode Date`), day1 = min(crosstab$`Episode Date`)))
return(crosstab)
}
crosstab <- tibble()
for(row in 1:nrow(combos)) {
crosstab <- rbind(crosstab, get_crosstab(combos[row,], d))
}
# Crosstab function for plots
get_crosstab <- function(combo) {
d <- cached$d
e1 <- e2 <- e3 <- e4 <- e5 <- e6 <- c()
if(length(grep("\\All\\b", combo$age_group)) == 0) {
e1 <- "`Age Group` %in% combo$age_group &"
}
if(length(grep("\\All\\b", combo$gender)) == 0) {
e2 <- "Gender %in% combo$gender &"
}
if(length(grep("\\All\\b", combo$hospitalized)) == 0) {
e3 <- "Hospitalized %in% combo$hospitalized &"
}
if(length(grep("\\All\\b", combo$icu)) == 0) {
e4 <- "`Intensive Care Unit` %in% combo$icu &"
}
if(length(grep("\\All\\b", combo$death)) == 0) {
e5 <- "Death %in% combo$death &"
}
if(length(grep("\\All\\b", combo$exposure)) == 0) {
e6 <- "`Exposure Setting` %in% combo$exposure"
}
if(length(e1) > 0 | length(e2) == 0 | length(e3) == 0 | length(e4) == 0 | length(e5) == 0 | length(e6) == 0) {
e <- paste0("d %>% filter(", e1, e2, e3, e4, e5, e6, ")")
e <- gsub("&)", ")", e)
#e <- paste0("d %>% filter(", e1, e2, ")", collapse = "")
d <- eval(parse(text = e))
}
# Convert episode date to date object
d$`Episode Date` <- as.Date(d$`Episode Date`, format = "%d-%b-%y")
# Remove cases with no episode date
d <- d %>% filter(! is.na(`Episode Date`))
# Sort data by episode date
d <- d[order(d$`Episode Date`),]
# Create a crosstab
crosstab <- d %>% group_by(`Episode Date`) %>% tally()
# Rename the n vector
names(crosstab)[ncol(crosstab)] <- "Incidence"
# Compute cumulative incidence
crosstab <- crosstab %>% mutate(`Cumulative Incidence` = cumsum(Incidence))
# Create an age group vector
crosstab <- crosstab %>% mutate(`Age Group` = rep(combo$age_group, nrow(crosstab)), Gender = rep(combo$gender, nrow(crosstab)), Hospitalized = rep(combo$hospitalized, nrow(crosstab)), `Intensive Care Unit` = rep(combo$icu, nrow(crosstab)), Death = rep(combo$death, nrow(crosstab)), `Exposure Setting` = rep(combo$exposure, nrow(crosstab)))
# Reorder columns
crosstab <- crosstab %>% select(`Age Group`, Gender, Hospitalized, `Intensive Care Unit`, Death, `Exposure Setting`, everything())
# Add day column
crosstab <- crosstab %>% mutate(Day = get_days(unlist(`Episode Date`), day1 = min(crosstab$`Episode Date`)))
return(crosstab)
}
crosstab <- tibble()
for(row in 1:nrow(combos)) {
crosstab <- rbind(crosstab, get_crosstab(combos[row,], d))
}
# Crosstab function for plots
get_crosstab <- function(combo) {
d <- cached$d
e1 <- e2 <- e3 <- e4 <- e5 <- e6 <- c()
if(length(grep("\\All\\b", combo$age_group)) == 0) {
e1 <- "`Age Group` %in% combo$age_group &"
}
if(length(grep("\\All\\b", combo$gender)) == 0) {
e2 <- "Gender %in% combo$gender &"
}
if(length(grep("\\All\\b", combo$hospitalized)) == 0) {
e3 <- "Hospitalized %in% combo$hospitalized &"
}
if(length(grep("\\All\\b", combo$icu)) == 0) {
e4 <- "`Intensive Care Unit` %in% combo$icu &"
}
if(length(grep("\\All\\b", combo$death)) == 0) {
e5 <- "Death %in% combo$death &"
}
if(length(grep("\\All\\b", combo$exposure)) == 0) {
e6 <- "`Exposure Setting` %in% combo$exposure"
}
if(length(e1) > 0 | length(e2) == 0 | length(e3) == 0 | length(e4) == 0 | length(e5) == 0 | length(e6) == 0) {
e <- paste0("d %>% filter(", e1, e2, e3, e4, e5, e6, ")")
e <- gsub("&)", ")", e)
#e <- paste0("d %>% filter(", e1, e2, ")", collapse = "")
d <- eval(parse(text = e))
}
# Convert episode date to date object
d$`Episode Date` <- as.Date(d$`Episode Date`, format = "%d-%b-%y")
# Remove cases with no episode date
d <- d %>% filter(! is.na(`Episode Date`))
# Sort data by episode date
d <- d[order(d$`Episode Date`),]
# Create a crosstab
crosstab <- d %>% group_by(`Episode Date`) %>% tally()
# Rename the n vector
names(crosstab)[ncol(crosstab)] <- "Incidence"
# Compute cumulative incidence
crosstab <- crosstab %>% mutate(`Cumulative Incidence` = cumsum(Incidence))
# Create an age group vector
crosstab <- crosstab %>% mutate(`Age Group` = rep(combo$age_group, nrow(crosstab)), Gender = rep(combo$gender, nrow(crosstab)), Hospitalized = rep(combo$hospitalized, nrow(crosstab)), `Intensive Care Unit` = rep(combo$icu, nrow(crosstab)), Death = rep(combo$death, nrow(crosstab)), `Exposure Setting` = rep(combo$exposure, nrow(crosstab)))
# Reorder columns
crosstab <- crosstab %>% select(`Age Group`, Gender, Hospitalized, `Intensive Care Unit`, Death, `Exposure Setting`, everything())
# Add day column
crosstab <- crosstab %>% mutate(Day = get_days(unlist(`Episode Date`), day1 = min(crosstab$`Episode Date`)))
return(crosstab)
}
crosstab <- tibble()
for(row in 1:nrow(combos)) {
crosstab <- rbind(crosstab, get_crosstab(combos[row,]))
}
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
d <- get_cansim("13-10-0766-01", refresh = TRUE)
nrow(d)
# Wrangle the raw data
wrangle_data <- function(d) {
# Reshape data from long to wide format
d_wide <- spread(d %>% select("Case identifier number", "Case information", VALUE, REF_DATE), "Case information", VALUE)
# Add leading zeros to case identifier number
d_wide$`Case identifier number` <- str_pad(d_wide$`Case identifier number`, width = nchar(max(as.numeric(d$`Case identifier number`))), pad = "0")
# Identify select vectors
vectors_to_factor <- c("Age group", "Gender", "Transmission", "Hospitalization", "Intensive care unit", "Death")
# Restructure as factors
d_wide[vectors_to_factor] <- lapply(d_wide[vectors_to_factor], factor)
# Add semantic labels
d_wide$`Age group` <- revalue(d_wide$`Age group`, c("1" = "0-19", "2" = "20-29", "3" = "30-39", "4" = "40-49", "5" = "50-59", "6" = "60-69", "7" = "70-79", "8" = "80+", "99" = "Not stated"))
d_wide$Gender <- revalue(d_wide$Gender, c("1" = "Male", "2" = "Female", "7" = "Non-binary", "9" = "Not stated"))
d_wide$Transmission <- revalue(d_wide$Transmission, c("1" = "Travel exposure", "2" = "Community exposure", "3" = "Pending"))
d_wide$Hospitalization <- revalue(d_wide$Hospitalization, c("1" = "Yes", "2" = "No", "9" = "Not stated"))
d_wide$`Intensive care unit` <- revalue(d_wide$`Intensive care unit`, c("1" = "Yes", "2" = "No", "9" = "Not stated"))
d_wide$Death <- revalue(d_wide$Death, c("1" = "Yes", "2" = "No", "9" = "Not stated"))
# Add day, month and reference year vectors together and structure as a date object
d_wide$`Episode date` <- as.Date(paste0(d_wide$REF_DATE, "-", str_pad(d_wide$`Episode date - month`, 2, pad = "0"), "-", str_pad(d_wide$`Episode date - day`, 2, pad = "0")), format = "%Y-%m-%d")
# Change format to %d-%b-%y
d_wide$`Episode date` <- format(d_wide$`Episode date`, format = "%d-%b-%y")
# Remove unwanted vectors from data
d_wide <- d_wide %>% select("Case identifier number", "Episode date", Gender, "Age group", Transmission, Hospitalization, "Intensive care unit", Death)
# Rename vectors
names(d_wide) <- c("CaseID", "Episode Date", "Gender", "Age Group", "Exposure Setting", "Hospitalized", "Intensive Care Unit", "Death")
# Order data by case ids in ascending order
d_wide <- d_wide %>% arrange(CaseID)
# Export data to Excel
write.xlsx2(as.data.frame(d_wide), paste0("Table 13-10-0766-01 - updated ", format(Sys.time(), "%Y-%m-%d"), ".xlsx"), row.names = FALSE, showNA = FALSE)
return(d_wide)
}
getwd()
d <- wrangle(d)
d <- wrangle_data(d)
nrow(d)
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
rm(list = ls())
package_names <- c("janitor","readxl","dplyr","deSolve","tidyr","ggplot2", "ggpubr", "tidyverse") # , "viridis")
load_packages <- lapply(package_names, require, character.only = TRUE)
WDir <- "c:/users/joel/google drive/github/seir/claude_v8(3)" # working directory **** NO TRAILING /   akin to choose.dir()  ****
setwd(WDir)
source("UtilitiesChunks.R")
source("SEIR.n.Age.Classes and friends.R")
# file_name = "BluePrint4 Conceptual model_V4_20200415V2(5agegrp)_SC1.xls"           # File misnamed.  There is only 1 age group in here. Date is prior to April 20.
# file_name = "BluePrint4 Conceptual model_V4_20200415V2(5agegrp)_SC1 - April20.xls" # File misnamed.  There is only 1 age group in here
file_name = "BluePrint4 Conceptual model_V4_20200415V2(1agegrp)_SC1 - April23.xls" # From PHAC"s misnamed "...(1agegrp)_SC1.xls" shared on April 23
sheet_names = list(initial.conditions="Initial conditions",parms.1d="Parameters by Age",parms.2d="Parameters by Age x Age",model.flow="Model Specs (not lazy)",auxiliary.vars="Intermediate calculations")
if(FALSE)  # DH's initial systematic (non random) search
{
# NOTE: this is the only place where you name the parameters
# NOTE: use the parameter name as it appears in the relevant Excel spreadsheet
multipliers <- exp(seq(from = -0.15, to = 0.15, by = 0.1))
upper.bound <- list(
Cgg = multipliers,
Cgq = multipliers,
lambda = multipliers,
# beta = multipliers,
sigma = multipliers
)
lower.bound = upper.bound
n.repeat = 1 # repetitions above and beyond the explosion of upper.bound, lower.bound
racine = 42
use.this.operation = c("overwrite","add","multiply")[3]
tmin.alter.scope = 40:55
}
if(TRUE)  # random search
{
# NOTE: this is the only place where you name the parameters
# NOTE: use the parameter name as it appears in the relevant Excel spreadsheet
center = c(Cgg=0.25,Cgq=0.0,lambda=-0.75,sigma=-0.75) # Joel solution 5-8 with Cgq set to 0  (exp(Cgq) = 1).
half.range = 0.2 + 0*center
#half.range["beta"] = 0
lower.bound = as.list( exp(center - half.range ) )
upper.bound = as.list( exp(center + half.range ) )
n.repeat = 400 # repetitions above and beyond the expansion of upper.bound, lower.bound
racine = 42
use.this.operation = c("overwrite","add","multiply")[3]
tmin.alter.scope = 40:55
}
# USER HAS NOTHING TO CHANGE BELOW
set.seed(racine)
# Compute all possible candidate by multiplier combinations
#multiplier_combos <- expand.grid(candidates, KEEP.OUT.ATTRS = FALSE)
lower.bound.expanded = expand.grid(lower.bound, KEEP.OUT.ATTRS = FALSE)
upper.bound.expanded = expand.grid(upper.bound, KEEP.OUT.ATTRS = FALSE)
if(any(dim(lower.bound.expanded) != dim(upper.bound.expanded) ))
stop('dimension mismatch')
if(any(colnames(lower.bound.expanded) != colnames(upper.bound.expanded) ))
stop('column name mismatch')
lower.bound.expanded = lower.bound.expanded[rep(seq(nrow(lower.bound.expanded)) , n.repeat ),]
upper.bound.expanded = upper.bound.expanded[rep(seq(nrow(upper.bound.expanded)) , n.repeat ),]
parms.to.try = (upper.bound.expanded - lower.bound.expanded) * runif(prod(dim(upper.bound.expanded)))
parms.to.try = lower.bound.expanded + parms.to.try
dim(parms.to.try) # check size of sweep you are about to do  (number of scenarios , number of parameters)
operation_list = list(overwrite = function(current,new)         {0*current+new        } ,
add       = function(current,increment  ) {  current+increment  } ,
multiply  = function(current,mult_factor) {  current*mult_factor} )
operation_func = operation_list[[use.this.operation]]
operation.label = c(overwrite="",add=".add",multiply=".multiplier")[use.this.operation]
# baseline/template
# results.baseline = SEIR.n.Age.Classes(file_name,sheet_names)[c("input.info","input.info.verbatim")] # all you really need
results.baseline = SEIR.n.Age.Classes(file_name,sheet_names)
sheet_names_for_sweep = results.baseline$input.info           # Can use either of those two lines ... in theory (not tested)
sheet_names_for_sweep = results.baseline$input.info.verbatim  # Can use either of those two lines ... in theory (not tested)
baseline.parms.1d = results.baseline$input.info$parms.1d  # data frame of 1d parameters
baseline.parms.2d = results.baseline$input.info$parms.2d  # data frame of 2d parameters
list.sweep = list() #        store results in list  ...
df.sweep = c()      # ... or store results in data.frame
list.sweep.ever.from.inflows = list.sweep.ever.from.outflows = list.sweep
df.sweep.ever.from.inflows =   df.sweep.ever.from.outflows =   df.sweep  # later maybe
outcomes.summary.df = c()
ever.been.here.info= list(ever.been.here.from.inflows="Not done", ever.been.here.from.outflows="Not done")
for(i in 1:nrow(lower.bound.expanded)) {
row <- parms.to.try[i,]
#this.label <- paste0(names(row),       ".multiplier= ", row, collapse = " , ")
this.label <- paste0(names(row), operation.label, "= ", row, collapse = " , ")
cat("\n Doing",i,"of",nrow(parms.to.try),"simulations :",this.label)
parms.1d = baseline.parms.1d  # data frame of 1d parameters to be altered
parms.2d = baseline.parms.2d  # data frame of 2d parameters to be altered
# Modify the parameter values at the specified tmin.alter.scope
for(parameter in names(row)) {
if(parameter %in% names(parms.1d)) {
parms.1d[parms.1d$tmin %in% tmin.alter.scope, parameter] = operation_func(subset(parms.1d,tmin %in% tmin.alter.scope)[[parameter]] , row[[parameter]] )
} else if(parameter %in% names(parms.2d)) {
parms.2d[parms.2d$tmin %in% tmin.alter.scope, parameter] = operation_func(subset(parms.2d,tmin %in% tmin.alter.scope)[[parameter]] , row[[parameter]] )
} else {
stop(paste(parameter,"was not found in any parameter sheet"))# Parameter was not found in any parameter sheet
}
}
sheet_names_for_sweep$parms.1d = parms.1d # altered data.frame goes in sheet_names_for_sweep
sheet_names_for_sweep$parms.2d = parms.2d # altered data.frame goes in sheet_names_for_sweep
this.result = SEIR.n.Age.Classes(file_name,sheet_names_for_sweep)
# Add on other time series like cumulative incidence
this.result$solution = Add.Other.Outcomes (this.result$solution,parms.1d,"third argument currently inoperant")
# Add on univariate stuff like maxI or maxI.time to outcomes.summary.df
univariate.chunk = Outcomes.Summary(this.result$solution)
univariate.chunk$etiquette = this.label # not sure if this is useful to keep
for(parameter in names(row))
univariate.chunk[[paste0(parameter, operation.label)]] <- row[[parameter]]
outcomes.summary.df = rbind(outcomes.summary.df,univariate.chunk)
# Get ever.been.here info
# ever.been.here.info = ever.been.here(this.result) # this.result has been altered above but should not cause harm
#Update list.sweep and df.sweep
list.sweep[[this.label]] = this.result$solution
list.sweep.ever.from.inflows [[this.label]] = ever.been.here.info$ever.been.here.from.inflows
list.sweep.ever.from.outflows[[this.label]] = ever.been.here.info$ever.been.here.from.outflows
# Add this.label and the parameter multpliers to the this.result$solution data frame
this.result$solution$etiquette <- this.label
for(parameter in names(row)) {
this.result$solution[[paste0(parameter, operation.label)]] <- row[[parameter]]
}
df.sweep = rbind(df.sweep,this.result$solution)
}
plot(outcomes.summary.df$maxI.time, outcomes.summary.df$cumI.75days)
View(outcomes.summary.df)
if(TRUE)  # random search
{
# NOTE: this is the only place where you name the parameters
# NOTE: use the parameter name as it appears in the relevant Excel spreadsheet
center = c(Cgg=0.25,Cgq=0.0,lambda=-0.75,sigma=-0.75) # Joel solution 5-8 with Cgq set to 0  (exp(Cgq) = 1).
half.range = 0.6 + 0*center
#half.range["beta"] = 0
lower.bound = as.list( exp(center - half.range ) )
upper.bound = as.list( exp(center + half.range ) )
n.repeat = 10 # repetitions above and beyond the expansion of upper.bound, lower.bound
racine = 42
use.this.operation = c("overwrite","add","multiply")[3]
tmin.alter.scope = 40:55
}
# USER HAS NOTHING TO CHANGE BELOW
set.seed(racine)
# Compute all possible candidate by multiplier combinations
#multiplier_combos <- expand.grid(candidates, KEEP.OUT.ATTRS = FALSE)
lower.bound.expanded = expand.grid(lower.bound, KEEP.OUT.ATTRS = FALSE)
upper.bound.expanded = expand.grid(upper.bound, KEEP.OUT.ATTRS = FALSE)
if(any(dim(lower.bound.expanded) != dim(upper.bound.expanded) ))
stop('dimension mismatch')
if(any(colnames(lower.bound.expanded) != colnames(upper.bound.expanded) ))
stop('column name mismatch')
lower.bound.expanded = lower.bound.expanded[rep(seq(nrow(lower.bound.expanded)) , n.repeat ),]
upper.bound.expanded = upper.bound.expanded[rep(seq(nrow(upper.bound.expanded)) , n.repeat ),]
parms.to.try = (upper.bound.expanded - lower.bound.expanded) * runif(prod(dim(upper.bound.expanded)))
parms.to.try = lower.bound.expanded + parms.to.try
dim(parms.to.try) # check size of sweep you are about to do  (number of scenarios , number of parameters)
operation_list = list(overwrite = function(current,new)         {0*current+new        } ,
add       = function(current,increment  ) {  current+increment  } ,
multiply  = function(current,mult_factor) {  current*mult_factor} )
operation_func = operation_list[[use.this.operation]]
operation.label = c(overwrite="",add=".add",multiply=".multiplier")[use.this.operation]
# baseline/template
# results.baseline = SEIR.n.Age.Classes(file_name,sheet_names)[c("input.info","input.info.verbatim")] # all you really need
results.baseline = SEIR.n.Age.Classes(file_name,sheet_names)
sheet_names_for_sweep = results.baseline$input.info           # Can use either of those two lines ... in theory (not tested)
sheet_names_for_sweep = results.baseline$input.info.verbatim  # Can use either of those two lines ... in theory (not tested)
baseline.parms.1d = results.baseline$input.info$parms.1d  # data frame of 1d parameters
baseline.parms.2d = results.baseline$input.info$parms.2d  # data frame of 2d parameters
list.sweep = list() #        store results in list  ...
df.sweep = c()      # ... or store results in data.frame
list.sweep.ever.from.inflows = list.sweep.ever.from.outflows = list.sweep
df.sweep.ever.from.inflows =   df.sweep.ever.from.outflows =   df.sweep  # later maybe
outcomes.summary.df = c()
ever.been.here.info= list(ever.been.here.from.inflows="Not done", ever.been.here.from.outflows="Not done")
for(i in 1:nrow(lower.bound.expanded)) {
row <- parms.to.try[i,]
#this.label <- paste0(names(row),       ".multiplier= ", row, collapse = " , ")
this.label <- paste0(names(row), operation.label, "= ", row, collapse = " , ")
cat("\n Doing",i,"of",nrow(parms.to.try),"simulations :",this.label)
parms.1d = baseline.parms.1d  # data frame of 1d parameters to be altered
parms.2d = baseline.parms.2d  # data frame of 2d parameters to be altered
# Modify the parameter values at the specified tmin.alter.scope
for(parameter in names(row)) {
if(parameter %in% names(parms.1d)) {
parms.1d[parms.1d$tmin %in% tmin.alter.scope, parameter] = operation_func(subset(parms.1d,tmin %in% tmin.alter.scope)[[parameter]] , row[[parameter]] )
} else if(parameter %in% names(parms.2d)) {
parms.2d[parms.2d$tmin %in% tmin.alter.scope, parameter] = operation_func(subset(parms.2d,tmin %in% tmin.alter.scope)[[parameter]] , row[[parameter]] )
} else {
stop(paste(parameter,"was not found in any parameter sheet"))# Parameter was not found in any parameter sheet
}
}
sheet_names_for_sweep$parms.1d = parms.1d # altered data.frame goes in sheet_names_for_sweep
sheet_names_for_sweep$parms.2d = parms.2d # altered data.frame goes in sheet_names_for_sweep
this.result = SEIR.n.Age.Classes(file_name,sheet_names_for_sweep)
# Add on other time series like cumulative incidence
this.result$solution = Add.Other.Outcomes (this.result$solution,parms.1d,"third argument currently inoperant")
# Add on univariate stuff like maxI or maxI.time to outcomes.summary.df
univariate.chunk = Outcomes.Summary(this.result$solution)
univariate.chunk$etiquette = this.label # not sure if this is useful to keep
for(parameter in names(row))
univariate.chunk[[paste0(parameter, operation.label)]] <- row[[parameter]]
outcomes.summary.df = rbind(outcomes.summary.df,univariate.chunk)
# Get ever.been.here info
# ever.been.here.info = ever.been.here(this.result) # this.result has been altered above but should not cause harm
#Update list.sweep and df.sweep
list.sweep[[this.label]] = this.result$solution
list.sweep.ever.from.inflows [[this.label]] = ever.been.here.info$ever.been.here.from.inflows
list.sweep.ever.from.outflows[[this.label]] = ever.been.here.info$ever.been.here.from.outflows
# Add this.label and the parameter multpliers to the this.result$solution data frame
this.result$solution$etiquette <- this.label
for(parameter in names(row)) {
this.result$solution[[paste0(parameter, operation.label)]] <- row[[parameter]]
}
df.sweep = rbind(df.sweep,this.result$solution)
}
plot(outcomes.summary.df$maxI.time, outcomes.summary.df$cumI.75days)
View(outcomes.summary.df)
if(TRUE)  # random search
{
# NOTE: this is the only place where you name the parameters
# NOTE: use the parameter name as it appears in the relevant Excel spreadsheet
center = c(Cgg=0.25,Cgq=0.0,lambda=-0.75,sigma=-0.75) # Joel solution 5-8 with Cgq set to 0  (exp(Cgq) = 1).
half.range = 0.2 + 0*center
#half.range["beta"] = 0
lower.bound = as.list( exp(center - half.range ) )
upper.bound = as.list( exp(center + half.range ) )
n.repeat = 400 # repetitions above and beyond the expansion of upper.bound, lower.bound
racine = 42
use.this.operation = c("overwrite","add","multiply")[3]
tmin.alter.scope = 40:55
}
# END User inputs
# END User inputs
# USER HAS NOTHING TO CHANGE BELOW
set.seed(racine)
# Compute all possible candidate by multiplier combinations
#multiplier_combos <- expand.grid(candidates, KEEP.OUT.ATTRS = FALSE)
lower.bound.expanded = expand.grid(lower.bound, KEEP.OUT.ATTRS = FALSE)
upper.bound.expanded = expand.grid(upper.bound, KEEP.OUT.ATTRS = FALSE)
if(any(dim(lower.bound.expanded) != dim(upper.bound.expanded) ))
stop('dimension mismatch')
if(any(colnames(lower.bound.expanded) != colnames(upper.bound.expanded) ))
stop('column name mismatch')
lower.bound.expanded = lower.bound.expanded[rep(seq(nrow(lower.bound.expanded)) , n.repeat ),]
upper.bound.expanded = upper.bound.expanded[rep(seq(nrow(upper.bound.expanded)) , n.repeat ),]
parms.to.try = (upper.bound.expanded - lower.bound.expanded) * runif(prod(dim(upper.bound.expanded)))
parms.to.try = lower.bound.expanded + parms.to.try
dim(parms.to.try) # check size of sweep you are about to do  (number of scenarios , number of parameters)
operation_list = list(overwrite = function(current,new)         {0*current+new        } ,
add       = function(current,increment  ) {  current+increment  } ,
multiply  = function(current,mult_factor) {  current*mult_factor} )
operation_func = operation_list[[use.this.operation]]
operation.label = c(overwrite="",add=".add",multiply=".multiplier")[use.this.operation]
# baseline/template
# results.baseline = SEIR.n.Age.Classes(file_name,sheet_names)[c("input.info","input.info.verbatim")] # all you really need
results.baseline = SEIR.n.Age.Classes(file_name,sheet_names)
sheet_names_for_sweep = results.baseline$input.info           # Can use either of those two lines ... in theory (not tested)
sheet_names_for_sweep = results.baseline$input.info.verbatim  # Can use either of those two lines ... in theory (not tested)
baseline.parms.1d = results.baseline$input.info$parms.1d  # data frame of 1d parameters
baseline.parms.2d = results.baseline$input.info$parms.2d  # data frame of 2d parameters
list.sweep = list() #        store results in list  ...
df.sweep = c()      # ... or store results in data.frame
list.sweep.ever.from.inflows = list.sweep.ever.from.outflows = list.sweep
df.sweep.ever.from.inflows =   df.sweep.ever.from.outflows =   df.sweep  # later maybe
outcomes.summary.df = c()
ever.been.here.info= list(ever.been.here.from.inflows="Not done", ever.been.here.from.outflows="Not done")
for(i in 1:nrow(lower.bound.expanded)) {
row <- parms.to.try[i,]
#this.label <- paste0(names(row),       ".multiplier= ", row, collapse = " , ")
this.label <- paste0(names(row), operation.label, "= ", row, collapse = " , ")
cat("\n Doing",i,"of",nrow(parms.to.try),"simulations :",this.label)
parms.1d = baseline.parms.1d  # data frame of 1d parameters to be altered
parms.2d = baseline.parms.2d  # data frame of 2d parameters to be altered
# Modify the parameter values at the specified tmin.alter.scope
for(parameter in names(row)) {
if(parameter %in% names(parms.1d)) {
parms.1d[parms.1d$tmin %in% tmin.alter.scope, parameter] = operation_func(subset(parms.1d,tmin %in% tmin.alter.scope)[[parameter]] , row[[parameter]] )
} else if(parameter %in% names(parms.2d)) {
parms.2d[parms.2d$tmin %in% tmin.alter.scope, parameter] = operation_func(subset(parms.2d,tmin %in% tmin.alter.scope)[[parameter]] , row[[parameter]] )
} else {
stop(paste(parameter,"was not found in any parameter sheet"))# Parameter was not found in any parameter sheet
}
}
sheet_names_for_sweep$parms.1d = parms.1d # altered data.frame goes in sheet_names_for_sweep
sheet_names_for_sweep$parms.2d = parms.2d # altered data.frame goes in sheet_names_for_sweep
this.result = SEIR.n.Age.Classes(file_name,sheet_names_for_sweep)
# Add on other time series like cumulative incidence
this.result$solution = Add.Other.Outcomes (this.result$solution,parms.1d,"third argument currently inoperant")
# Add on univariate stuff like maxI or maxI.time to outcomes.summary.df
univariate.chunk = Outcomes.Summary(this.result$solution)
univariate.chunk$etiquette = this.label # not sure if this is useful to keep
for(parameter in names(row))
univariate.chunk[[paste0(parameter, operation.label)]] <- row[[parameter]]
outcomes.summary.df = rbind(outcomes.summary.df,univariate.chunk)
# Get ever.been.here info
# ever.been.here.info = ever.been.here(this.result) # this.result has been altered above but should not cause harm
#Update list.sweep and df.sweep
list.sweep[[this.label]] = this.result$solution
list.sweep.ever.from.inflows [[this.label]] = ever.been.here.info$ever.been.here.from.inflows
list.sweep.ever.from.outflows[[this.label]] = ever.been.here.info$ever.been.here.from.outflows
# Add this.label and the parameter multpliers to the this.result$solution data frame
this.result$solution$etiquette <- this.label
for(parameter in names(row)) {
this.result$solution[[paste0(parameter, operation.label)]] <- row[[parameter]]
}
df.sweep = rbind(df.sweep,this.result$solution)
}
?identify
?all.equal
a <- read_excel("c:/users/joel/google drive/github/covid19/Table 13-10-0766-01 - updated 2020-04-28.xlsx")
b <- read_excel("c:/users/joel/google drive/github/covid19/Table 13-10-0766-01 - updated 2020-04-27.xlsx")
c <- all.equal(a, b)
isTRUE(c)
d <- b
c <- all.equal(d, b)
isTRUE(c)
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
runApp('C:/Users/Joel/Google Drive/GitHub/covid19')
